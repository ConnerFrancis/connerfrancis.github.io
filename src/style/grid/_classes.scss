/**
 * Classes
 *
 * Columns, Rem Cells, and Containers.
 */

// Constants
// =======================

// Flex directions
$directions: (
  right: row,
  left:  row-reverse,
  down:  column,
  up:    column-reverse
);

// Flex item alignment
$alignments: (
  center: center,
  end: flex-end,
  start: flex-start,
  between: space-between,
  around: space-around,
  even: space-evenly,
  stretch: stretch,
  baseline: baseline
);

// Resets
// =======================
@mixin reset {
  box-sizing: border-box;
  &::after, &::before { box-sizing: border-box; }
}

// Container
// =======================

// Used for holding .col, .row, and modifiers of those
.container {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  justify-content: flex-start;
  align-items: flex-start;
  flex-wrap: wrap;
}

// Flex directions
@each $key, $val in $directions {
  .go-#{$key} {
    flex-direction: $val;
  }
}

// Flex alignment
@each $key, $val in $alignments {
  .justify-#{$key} {
    justify-content: $val;
  }

  .align-#{$key} {
    align-items: $val;
  }

  .push-#{$key} {
    align-content: $val;
  }
}

// Item alignment in flex
@each $key, $val in $alignments {
  .be-justify-#{$key} {
    justify-self: $val;
  }

  .be-align-#{$key} {
    align-self: $val;
  }
}

// Rem Cells (.w and .h)
// =======================

// Take each factor label
@each $key, $rem-factor in $rem-factors {
  $breakpoint: map-get($breakpoints, $key);

  @media only all and (min-width: $breakpoint) {

    // Create classes for each factor
    @for $i from 1 through $rem-factor {

      // Width
      // > .w-lg-5

      // Used for fixed width elements
      // using the `rem` unit
      .w-#{$key}-#{$i} {
        width: $i * 1rem;
      }

      // Height

      // Used for fixed height elements
      // using the `rem` unit
      .h-#{$key}-#{$i} {
        height: $i * 1rem;
      }
    }
  }
}

// Percent Cells (columns or .col and .row)
// =======================

@mixin col {
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: auto;
  @include reset;
}

// Used for a full-width element
.row {
  flex-grow: 1;
  flex-shrink: 0;
  flex-basis: auto;
  // That row effect u know what I'm sayin?
  justify-self: stretch;
  width: 100%;
  @include reset;
}

// Used for automatic width distribution in containers
.col {
  @include col;
}

// Used for full-height elements
.fluid, .fluid-height {
  align-self: stretch;
}

// WARNING: Big column class creation logic ahead!
// Take each label and size of the breakpoints

// All size cols
@for $i from 1 through $col-count {
  .col-#{$i} {
    @include col;
    max-width: (100% / $col-count) * $i;
    flex-basis: (100% / $col-count) * $i;
    flex-grow: 0;
    flex-shrink: 0;
  }
}

// Specific size/breakpoint cols
@each $label, $size in $breakpoints {

  // Get the size after the current one
  $next-size: map-get-next($breakpoints, $label);

  // If there is no size
  @if $next-size == false {

    @media (min-width: $size) {

      @for $i from 1 through $col-count {

        // Note: the `quote` function must be used
        //       with the string literal `#{}` to work here.
        //       Sometimes it really do be like that.
        .col-#{$label}-#{$i} {
          @include col;
          max-width: (100% / $col-count) * $i;
          flex-basis: (100% / $col-count) * $i;
          flex-grow: 0;
          flex-shrink: 0;
        }
      }
    }
  } @else {

    //                                         We subtract 1 for ez breakpoints
    @media (min-width: $size) and (max-width: ($next-size - 1px)) {

      @for $i from 1 through $col-count {

        .col-#{$label}-#{$i} {
          @include col;
          max-width: (100% / $col-count) * $i;
          flex-basis: (100% / $col-count) * $i;
          flex-grow: 0;
          flex-shrink: 0;
        }
      }
    }
  }
}

// Modifiers
// =======================

// Used for a full-container size element
.jumbotron {
  @extend .row;
  justify-self: stretch;
  align-self: stretch;
}

// Used for 100 view height elements
.screen-height {
  height: 100vh;
}